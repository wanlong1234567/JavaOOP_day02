回顾:
1.什么是类？什么是对象？
2.如何创建类？如何创建对象？如何访问成员？
3.引用类型之间画等号:指向同一个对象 会影响
4.null:空，没有指向任何对象
       若引用的值为null，则该引用不能进行任何操作了，
	   若操作则NullPointerException空指针异常





正课:
1:方法的签名: 方法名+参数列表
2.方法的重载(Overload):
  1)发生在同一个类中，方法名称相同，参数列表不同
  2)编译器在编译时会根据方法的签名自动绑定方法
3.构造方法:
  1)常常用于给成员变量赋初值
  2)与类同名，没有返回值类型
  3)在创建(new)对象时被自动调用
  4)若自己不写构造方法，则编译器默认一个无参构造方法
    若自己写了构造方法，则不再默认提供
  5)构造方法可以重载
4.this:指代当前对象，哪个对象调用方法指的就是哪个对象
       只能用在方法中，方法中访问成员变量之前默认有个this.
  this的用法:
    1)this.成员变量名------------访问成员变量
	2)this.方法名()--------------调用方法
	3)this()---------------------调用构造方法
5.引用类型数组:




练习:
1)复习OO第1,2天的内容---完成Cell和CellTest类(oo.day03包中)
2)复习语言基础内容(建议:猜字符游戏)
3)完成每周一做















class Cell{
  int row;
  int col;

  Cell(){
    this(0,0);
  }
  Cell(int n){
    this(n,n);
  }
  Cell(int row,int col){
    this.row = row;
	this.col = col;
  }
}

















class Cell{
  int row;
  int col;
  Cell(int row,int col){
	this.row = row;
	this.col = col;
  }
}
















class Cell{
  int row; //成员变量
  int col;
  Cell(int row,int col){ //局部变量
    this.row = row;
	this.col = col;
  }
  void drop(){
    row++;
  }
}

当成员变量与局部变量同名时，this不能省略






成员变量(堆)和局部变量(栈)----------可以同名
就近原则















数字、_、$符----------------只在特殊情况下使用

















Cell c = new Cell();
c.row = 2;
c.col = 5;
c.drop();
c.moveLeft(3);
String str = c.getCellInfo();




Cell cc = new Cell();
cc.row = 1;
cc.col = 4;
cc.drop();
cc.moveLeft(2);
String str = cc.getCellInfo();

class Cell{
  int row;
  int col;
  void drop(){
    this.row++; //cc.row++;--------------2
  }
  void moveLeft(int n){
    this.col-=n; //cc.col-=2;------------2
  }
  String getCellInfo(){
    return this.row+","+this.col; //cc.row+","+cc.col----2,2
  }
}
















Cell c1 = new Cell();
Cell c2 = new Cell(2,5);

class Cell{
  int row;
  int col;
  Cell(){
    row = 0;
	col = 0;
  }
  Cell(int row1,int col1){
    row = row1;
	col = col1;
  }
}










Cell c = new Cell();
c.row = 2;
c.col = 5;

Cell c = new Cell(2,5);
Cell cc = new Cell(1,6);
Cell ccc = new Cell(); //编译错误，没有无参构造

class Cell{
  int row;
  int col;
  Cell(int row1,int col1){
    row = row1;
	col = col1;
  }
}













Student zs = new Student("zhangsan",25,"廊坊");
Student ls = new Student("lisi",26,"佳木斯");


class Student{
  String name;
  int age;
  String address;
  //给成员变量赋初值
  Student(String name,int age,String address){
    this.name = name;
	this.age = age;
	this.address = address;
  }
}

//1)创建了一个学生对象
//2)给所有成员变量赋默认值
//3)调用Student类的无参构造方法
Student zs = new Student();

Student zs = new Student();
zs.setInfo("zhangsan",25,"廊坊");

Student ls = new Student();
ls.setInfo("lisi",26,"佳木斯");








Student zs = new Student();
zs.name = "zhangsan";
zs.age = 25;
zs.address = "河北廊坊";

Student ls = new Student();
ls.name = "lisi";
ls.age = 26;
ls.address = "黑龙江佳木斯";























void println(){
}
void println(int a){
}
void println(double a){
}
void println(char a){
}
void println(boolean a){
}
void println(String a){
}


System.out.println();
System.out.println(23);
System.out.println(24.678);
System.out.println('你');
System.out.println(true);
System.out.println("Hello");
















Cell c = new Cell();
c.row = 2;
c.col = 5;
c.drop();
c.moveLeft(3);
String str = c.getCellInfo();

class Cell{
  int row;
  int col;
  void drop(){
    row++;
  }
  void moveLeft(int n){
    col-=n;
  }
  void moveRight(int n){
    col+=n;
  }
  String getCellInfo(){
    return row+","+col;
  }
}














